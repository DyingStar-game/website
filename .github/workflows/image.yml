name: Build Docker Image

on:
  workflow_call:
    outputs:
      target:
        description: "Deployment target (prod/staging/none)"
        value: ${{ jobs.docker-image.outputs.target }}
      tag_primary:
        description: "Primary image tag"
        value: ${{ jobs.docker-image.outputs.tag_primary }}
      tag_secondary:
        description: "Secondary image tag"
        value: ${{ jobs.docker-image.outputs.tag_secondary }}

env:
  IMAGE_NAME: website
  REGISTRY: ghcr.io/dyingstar-game

jobs:
  docker-image:
    name: Build production Docker image (runtime)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      target: ${{ steps.meta.outputs.target }}
      tag_primary: ${{ steps.tags.outputs.tag_primary }}
      tag_secondary: ${{ steps.tags.outputs.tag_secondary }}
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Download runtime artifact
        uses: actions/download-artifact@v4
        with:
          name: next-runtime
          path: artifact

      - name: Extract runtime artifact (restore symlinks)
        run: |
          set -euo pipefail
          tar -xzf artifact/runtime.tar.gz

      - name: Decide target (prod/staging/none)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          TARGET="none"
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            TARGET="prod"
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="staging"
          fi
          if [[ "$TARGET" == "prod" ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> "$GITHUB_OUTPUT"
          else
            echo "platforms=linux/amd64" >> "$GITHUB_OUTPUT"
          fi
          echo "target=$TARGET" >> "$GITHUB_OUTPUT"
          echo "Target decided: $TARGET"

      - name: Compute tags
        id: tags
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          if [[ "${{ steps.meta.outputs.target }}" == "staging" ]]; then
            echo "tag_primary=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging" >> $GITHUB_OUTPUT
            echo "tag_secondary=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${SHORT_SHA}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.meta.outputs.target }}" == "prod" ]]; then
            VER="${GITHUB_REF_NAME}"   # vX.Y.Z
            echo "tag_primary=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VER}" >> $GITHUB_OUTPUT
            echo "tag_secondary=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          else
            echo "tag_primary=" >> $GITHUB_OUTPUT
            echo "tag_secondary=" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        if: ${{ contains(steps.meta.outputs.platforms, 'arm64') }}
        uses: docker/setup-qemu-action@v3

      - name: Decide push/cache policy
        id: policy
        shell: bash
        run: |
          set -euo pipefail
          TARGET="${{ steps.meta.outputs.target }}"
          IS_PR="${{ github.event_name == 'pull_request' }}"
          IS_FORK="false"
          if [[ "$IS_PR" == "true" && "${{ github.event.pull_request.head.repo.fork }}" == "true" ]]; then IS_FORK="true"; fi

          PUSH=false
          if [[ "$TARGET" == "prod" ]]; then
            # prod: uniquement sur tag v*
            if [[ "${GITHUB_REF}" == refs/tags/v* && "$IS_PR" != "true" ]]; then PUSH=true; fi
          elif [[ "$TARGET" == "staging" ]]; then
            # staging: develop ou dispatch, pas en PR
            if [[ "$IS_PR" != "true" ]]; then PUSH=true; fi
          fi

          USE_GHA_CACHE=false
          if [[ "$PUSH" != "true" || "$TARGET" == "none" || "$IS_PR" == "true" ]]; then USE_GHA_CACHE=true; fi

          echo "push=$PUSH"  >> "$GITHUB_OUTPUT"
          echo "use_gha_cache=$USE_GHA_CACHE" >> "$GITHUB_OUTPUT"
          echo "policy -> push=$PUSH ga_cache=$USE_GHA_CACHE target=$TARGET"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ steps.policy.outputs.push == 'true' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build local (pas de push, cache GHA Si possible)
      - name: Build (no push)
        if: ${{ steps.policy.outputs.push != 'true' || steps.meta.outputs.target == 'none' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.prod
          platforms: ${{ steps.meta.outputs.platforms }}
          push: false
          provenance: false
          # on tag quand mÃªme localement pour valider la build
          tags: |
            ${{ steps.tags.outputs.tag_secondary }}
            ${{ steps.tags.outputs.tag_primary }}
          cache-from: ${{ steps.policy.outputs.use_gha_cache == 'true' && 'type=gha' || '' }}
          cache-to: ${{ steps.policy.outputs.use_gha_cache == 'true' && 'type=gha,mode=max' || '' }}

      # Build & Push (avec cache registry)
      - name: Build & Push
        if: ${{ steps.policy.outputs.push == 'true' && steps.meta.outputs.target != 'none' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.prod
          platforms: ${{ steps.meta.outputs.platforms }}
          push: true
          provenance: false
          tags: |
            ${{ steps.tags.outputs.tag_primary }}
            ${{ steps.tags.outputs.tag_secondary }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
