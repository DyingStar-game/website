name: Build Application

on:
  workflow_call:
    inputs:
      node_version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "22"

env:
  PNPM_HOME: ~/.local/share/pnpm

jobs:
  build:
    name: Build Next.js runtime artifact
    runs-on: ubuntu-latest
    container:
      image: node:${{ inputs.node_version }}-alpine
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install gnu tar (fix BusyBox tar for cache)
        run: |
          apk update && apk add --no-cache tar jq
          tar --version || true

      - name: Enable Corepack & activate pinned pnpm
        id: pnpm-version
        run: |
          set -euo pipefail
          corepack enable
          # Extract pnpm version from package.json (packageManager field)
          VERSION=$(jq -r '.packageManager|capture("pnpm@(?<v>.*)$").v' package.json)
          echo "Detected pnpm version: $VERSION"
          corepack prepare pnpm@${VERSION} --activate
          pnpm --version
          echo "pnpm_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.local/share/pnpm
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Restore Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-cache-${{ runner.os }}-${{ hashFiles('next.config.ts') }}
          restore-keys: |
            next-cache-${{ runner.os }}-

      - name: Recreate .env from secret
        run: |
          echo "Creating .env from secret WEBSITE_ENV_FILE"
          # Secret WEBSITE_ENV_FILE must contain full multi-line contents of .env
          # This env file is needed for all workflows
          printf '%s\n' "${{ secrets.WEBSITE_ENV_FILE }}" > .env
          sed -i 's/\r$//' .env

      - name: Recreate .env.production from secret
        run: |
          echo "Creating .env.production from secret WEBSITE_ENV_FILE"
          # Secret WEBSITE_ENV_FILE must contain full multi-line contents of .env.production
          printf "%s" "${{ secrets.WEBSITE_ENV_FILE }}" > .env.production

      - name: Type generation
        run: |
          pnpm --reporter=append-only type:generate

      - name: Build (Next.js)
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          NEXT_TELEMETRY_DISABLED: 1
        run: pnpm --reporter=append-only build

      - name: Prune dev dependencies from node_modules
        run: pnpm prune --prod

      - name: Pack runtime artifact (preserve pnpm symlinks)
        run: |
          set -euo pipefail
          echo "Creating runtime.tar.gz (symlinks preserved)"
          tar -czf runtime.tar.gz \
            .next/standalone \
            .next/static \
            public \
            package.json \
            pnpm-lock.yaml

      - name: Upload runtime artifact (tarball)
        uses: actions/upload-artifact@v4
        with:
          name: next-runtime
          path: runtime.tar.gz
          retention-days: 1
          if-no-files-found: error
          compression-level: 0
