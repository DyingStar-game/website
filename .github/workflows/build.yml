name: Build & Image Next.js

on:
  push:
    branches: [main, develop]
    # Push events for version tags (e.g. v1.2.3) will also trigger
    tags: ["v*", "release-*"]
  pull_request:
    branches: [main, develop]
  # Manual trigger: build & push image tagged with branch name
  workflow_dispatch:
    inputs: {}
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: website
  REGISTRY: ghcr.io/dyingstar-game
  IMAGE_TAG: staging
jobs:
  build:
    name: Build Next.js runtime artifact
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
      options: >-
        --cpus=2
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install gnu tar (fix BusyBox tar for cache)
        run: |
          apk update && apk add --no-cache tar
          tar --version || true
      - name: Enable Corepack & activate pinned pnpm
        id: pnpm-version
        run: |
          set -euo pipefail
          corepack enable
          # Extract pnpm version from package.json (packageManager field)
          VERSION=$(grep -E '"packageManager"' package.json | sed -E 's/.*pnpm@([^" ]+).*/\1/')
          echo "Detected pnpm version: $VERSION"
          corepack prepare pnpm@${VERSION} --activate
          pnpm --version
          echo "pnpm_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-

      - name: Install dependencies (pnpm install)
        run: pnpm --reporter=append-only install --frozen-lockfile

      - name: Allow build scripts (non-interactive)
        run: |
          pnpm config set allow-scripts "@parcel/watcher,@tailwindcss/oxide,esbuild,sharp"

      - name: Lint
        run: pnpm --reporter=append-only lint

      - name: Recreate .env.production from secret
        run: |
          echo "Creating .env.production from secret WEBSITE_ENV_PRODUCTION_FILE"
          # Secret WEBSITE_ENV_PRODUCTION_FILE must contain full multi-line contents of .env.production
          printf "%s" "${{ secrets.WEBSITE_ENV_PRODUCTION_FILE }}" > .env.production

      - name: Build (Next.js)
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: pnpm --reporter=append-only build

      - name: Clean up .next/cache to reduce artifact size
        run: rm -rf .next/cache

      - name: Prune dev dependencies from node_modules
        run: pnpm prune --prod

      - name: Pack runtime artifact (preserve pnpm symlinks)
        if: success()
        run: |
          set -euo pipefail
          echo "Creating runtime.tar.gz (symlinks preserved)"
          tar -czf runtime.tar.gz \
            .next/standalone \
            .next/static \
            public \
            package.json \
            pnpm-lock.yaml
          tar -tzf runtime.tar.gz | head -40 || true

      - name: Upload runtime artifact (tarball)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: next-runtime
          path: runtime.tar.gz
          retention-days: 7
          if-no-files-found: error

  docker-image:
    name: Build production Docker image (runtime)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    outputs:
      IMAGE_TAG: ${{ steps.image-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Download runtime artifact
        uses: actions/download-artifact@v4
        with:
          name: next-runtime
          path: artifact

      - name: Extract runtime artifact (restore symlinks)
        run: |
          set -euo pipefail
          tar -xzf artifact/runtime.tar.gz
          # Quick sanity check: list symlinks inside node_modules (expect pnpm structure)
          find .next/standalone/node_modules -maxdepth 1 -type l -printf '%f -> %l\n' | head -20 || true
          ls -1 .next/standalone/node_modules/.pnpm | head -20 || true

      - name: Define docker image TAG
        id: image-tag
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "IMAGE_TAG=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_REF}" == refs/heads/develop ]]; then
            echo "IMAGE_TAG=staging" >> "$GITHUB_OUTPUT"
          else
            echo "IMAGE_TAG=staging" >> "$GITHUB_OUTPUT"
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile.prod
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{ steps.image-tag.outputs.IMAGE_TAG }}
          cache-from: type=registry,ref=${{env.REGISTRY}}/${{env.IMAGE_NAME}}:buildcache
          cache-to: type=registry,ref=${{env.REGISTRY}}/${{env.IMAGE_NAME}}:buildcache,mode=max

  deploy:
    name: Deploy image with ssh
    runs-on: ubuntu-latest
    needs: [docker-image]
    if: >
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v') ||
      github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout compose files
        uses: actions/checkout@v4

      - name: Compute target (env + tag)
        id: target
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            COMPOSE="${{ secrets.COMPOSE_FILE_PROD }}"
          elif [[ "${GITHUB_REF}" == refs/heads/develop ]]; then
            COMPOSE="${{ secrets.COMPOSE_FILE_STAGING }}"
          else
            COMPOSE="${{ secrets.COMPOSE_FILE_STAGING }}"
          fi
          echo "compose=${COMPOSE}" >> "$GITHUB_OUTPUT"

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -e
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            # COMPOSE="${{ steps.target.outputs.compose }}"
            echo "CD to compose folder"
            cd docker
            # echo "Pull ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{ needs.docker-image.outputs.IMAGE_TAG }}"
            # docker pull ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{ needs.docker-image.outputs.IMAGE_TAG }}"
            echo "Deploy using compose file: ${COMPOSE}"
            docker compose -f staging.compose.yml up -d
            echo "Containers:"
            docker compose -f staging.compose.yml ps
