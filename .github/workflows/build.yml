name: Build & Image Next.js

on:
  push:
    branches: [ main, develop, feature/add-docker-stack ]
    # Push events for version tags (e.g. v1.2.3) will also trigger
    tags: [ 'v*', 'release-*' ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build standalone artifact
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
      options: >-
        --cpus=2
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install gnu tar (fix BusyBox tar for cache)
        run: |
          apk update && apk add --no-cache tar
          tar --version || true
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies (npm ci)
        run: npm ci --no-audit --no-fund

      - name: Lint
        run: npm run lint

      - name: Build
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: npm run build

      - name: Upload standalone artifact
        if: success()
        continue-on-error: false
        uses: actions/upload-artifact@v4
        with:
          name: next-standalone
          path: |
            .next/standalone
            .next/static
            public
          retention-days: 7
          if-no-files-found: warn

  docker-image:
    name: Build production Docker image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: dyingstar-website
      REGISTRY: ghcr.io/${{ github.repository_owner }}
      TAG: ${{ github.sha }}
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Download standalone artifact
        uses: actions/download-artifact@v4
        with:
          name: next-standalone
          path: artifact
      - name: Prepare build context
        run: |
          mkdir -p .next/standalone .next/static
          cp -a artifact/.next/standalone/* .next/standalone/
          cp -a artifact/.next/static .next/
          cp -a artifact/public ./public
          ls -1 .next | head -20

      - name: Build image (docker/Dockerfile.prod)
        run: docker build -f docker/Dockerfile.prod -t $IMAGE_NAME:$TAG .

      - name: Log in to GitHub Container Registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag & Push image to GHCR (only for tags on main)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          REF_NAME: ${{ github.ref_name }} # tag name
          DEFAULT_BRANCH: main
        run: |
          set -euo pipefail
          IMAGE_FULL="${REGISTRY}/${IMAGE_NAME}"

          echo "Checking that the tagged commit is reachable from main..."
          git fetch origin $DEFAULT_BRANCH --depth=1
          if git merge-base --is-ancestor $GITHUB_SHA origin/$DEFAULT_BRANCH; then
            echo "Commit is on $DEFAULT_BRANCH. Proceeding with push."
          else
            echo "Commit is NOT on $DEFAULT_BRANCH. Skipping push to registry." >&2
            exit 0
          fi

          echo "Tagging image with commit SHA: $IMAGE_FULL:$TAG"
            docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:$TAG

          VERSION_TAG="$REF_NAME"
          echo "Tagging image with version tag: $IMAGE_FULL:$VERSION_TAG"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:$VERSION_TAG

          echo "Tagging image with latest: $IMAGE_FULL:latest"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:latest

          echo "Pushing tags..."
          docker push $IMAGE_FULL:$TAG
          docker push $IMAGE_FULL:$VERSION_TAG
          docker push $IMAGE_FULL:latest

          echo "Pushed images:"
          docker image ls | grep $IMAGE_NAME | head -5