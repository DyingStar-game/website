name: Build & Image Next.js

on:
  push:
    branches: [main, feat/CD]
    # Push events for version tags (e.g. v1.2.3) will also trigger
    tags: ["v*", "release-*"]
  pull_request:
    branches: [main, feat/CD]
  workflow_dispatch:
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: website
  REGISTRY: ghcr.io/dyingstar-game

jobs:
  build:
    name: Build Next.js runtime artifact
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
      options: >-
        --cpus=2
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install gnu tar (fix BusyBox tar for cache)
        run: |
          apk update && apk add --no-cache tar
          tar --version || true
      - name: Enable Corepack & activate pinned pnpm
        id: pnpm-version
        run: |
          set -euo pipefail
          corepack enable
          # Extract pnpm version from package.json (packageManager field)
          VERSION=$(grep -E '"packageManager"' package.json | sed -E 's/.*pnpm@([^" ]+).*/\1/')
          echo "Detected pnpm version: $VERSION"
          corepack prepare pnpm@${VERSION} --activate
          pnpm --version
          echo "pnpm_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-

      - name: Install dependencies (pnpm install)
        run: pnpm --reporter=append-only install --frozen-lockfile

      - name: Allow build scripts (non-interactive)
        run: pnpm config set allow-scripts "@parcel/watcher,@tailwindcss/oxide,esbuild,sharp"

      - name: Lint
        run: pnpm --reporter=append-only lint

      - name: Recreate .env from secret
        run: |
          echo "Creating .env from secret WEBSITE_ENV_FILE"
          # Secret WEBSITE_ENV_FILE must contain full multi-line contents of .env
          # This env file is needed for the build process
          printf "%s" "${{ secrets.WEBSITE_ENV_FILE }}" > .env

      - name: Build (Next.js)
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: pnpm --reporter=append-only build

      - name: Clean up .next/cache to reduce artifact size
        run: rm -rf .next/cache

      - name: Prune dev dependencies from node_modules
        run: pnpm prune --prod

      - name: Pack runtime artifact (preserve pnpm symlinks)
        run: |
          set -euo pipefail
          echo "Creating runtime.tar.gz (symlinks preserved)"
          tar -czf runtime.tar.gz \
            .next/standalone \
            .next/static \
            public \
            package.json \
            pnpm-lock.yaml
          tar -tzf runtime.tar.gz | head -40 || true

      - name: Upload runtime artifact (tarball)
        uses: actions/upload-artifact@v4
        with:
          name: next-runtime
          path: runtime.tar.gz
          retention-days: 7
          if-no-files-found: error

  docker-image:
    name: Build production Docker image (runtime)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        env_name: [staging, prod]
    outputs:
      staging_tag: ${{ steps.tags.outputs.staging_tag }}
      staging_immutable_tag: ${{ steps.tags.outputs.staging_immutable_tag }}
      prod_tag: ${{ steps.tags.outputs.prod_tag }}
      prod_latest: ${{ steps.tags.outputs.prod_latest }}
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Download runtime artifact
        uses: actions/download-artifact@v4
        with:
          name: next-runtime
          path: artifact

      - name: Extract runtime artifact (restore symlinks)
        run: |
          set -euo pipefail
          tar -xzf artifact/runtime.tar.gz

      - name: Compute tags
        id: tags
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          if [[ "${{ matrix.env_name }}" == "staging" ]]; then
            echo "staging_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging" >> $GITHUB_OUTPUT
            echo "staging_immutable_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${SHORT_SHA}" >> $GITHUB_OUTPUT
          else
            # prod: require annotated tag v*
            VER="${GITHUB_REF_NAME}"
            # fallback: if not a tag, create a CI-only immutable tag to allow dry-run build
            if [[ "${GITHUB_REF}" != refs/tags/v* ]]; then
              VER="ci-${SHORT_SHA}"
            fi
            echo "prod_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VER}" >> $GITHUB_OUTPUT
            echo "prod_latest=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Decide push/cache policy
        id: policy
        shell: bash
        run: |
          set -euo pipefail
          IS_PR="${{ github.event_name == 'pull_request' }}"
          IS_FORK="false"
          if [[ "$IS_PR" == "true" && "${{ github.event.pull_request.head.repo.fork }}" == "true" ]]; then
            IS_FORK="true"
          fi

          IS_TAG=$([[ "${GITHUB_REF}" == refs/tags/v* ]] && echo true || echo false)
          IS_STAGING_BRANCH=$([[ "${GITHUB_REF}" == refs/heads/feat/CD ]] && echo true || echo false)

          # Push rules:
          # - prod: only on tag (v*)
          # - staging: on feat/CD branch or workflow_dispatch
          PUSH=false
          if [[ "${{ matrix.env_name }}" == "prod" && "$IS_TAG" == "true" ]]; then PUSH=true; fi
          if [[ "${{ matrix.env_name }}" == "staging" && ( "${{ github.event_name }}" == "workflow_dispatch" || "$IS_STAGING_BRANCH" == "true" ) ]]; then PUSH=true; fi
          if [[ "$IS_PR" == "true" ]]; then PUSH=false; fi

          # Cache disabled on forks/PRs
          DO_CACHE=true
          if [[ "$IS_PR" == "true" || "$IS_FORK" == "true" ]]; then DO_CACHE=false; fi

          echo "push=$PUSH" >> $GITHUB_OUTPUT
          echo "cache=$DO_CACHE" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ steps.policy.outputs.push == 'true' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (no push, no cache)
        if: ${{ steps.policy.outputs.push != 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: false
          provenance: false
          tags: |
            ${{ matrix.env_name == 'staging' && steps.tags.outputs.staging_immutable_tag || '' }}
            ${{ matrix.env_name == 'prod' && steps.tags.outputs.prod_tag || '' }}

      - name: Build & Push (with registry cache)
        if: ${{ steps.policy.outputs.push == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: |
            ${{ matrix.env_name == 'staging' && steps.tags.outputs.staging_tag || '' }}
            ${{ matrix.env_name == 'staging' && steps.tags.outputs.staging_immutable_tag || '' }}
            ${{ matrix.env_name == 'prod' && steps.tags.outputs.prod_tag || '' }}
            ${{ matrix.env_name == 'prod' && steps.tags.outputs.prod_latest || '' }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/{{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/{{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy (${{ matrix.env_name }})
    needs: [docker-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        env_name: [staging, prod]

    steps:
      - name: Decide if we should deploy
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          SHOULD=false
          if [[ "${{ matrix.env_name }}" == "prod" && "${GITHUB_REF}" == refs/tags/v* ]]; then
            SHOULD=true
          fi
          if [[ "${{ matrix.env_name }}" == "staging" && ( "${{ github.event_name }}" == "workflow_dispatch" || "${GITHUB_REF}" == "refs/heads/feat/CD" ) ]]; then
            SHOULD=true
          fi
          echo "deploy=$SHOULD" >> "$GITHUB_OUTPUT"
          echo "deploy? $SHOULD"

      - name: Checkout compose files
        if: ${{ steps.gate.outputs.deploy == 'true' }}
        uses: actions/checkout@v4

      - name: Choose compose file
        if: ${{ steps.gate.outputs.deploy == 'true' }}
        id: choose
        shell: bash
        run: |
          if [[ "${{ matrix.env_name }}" == "prod" ]]; then
            echo "compose=${{ secrets.COMPOSE_FILE_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "compose=${{ secrets.COMPOSE_FILE_STAGING }}" >> $GITHUB_OUTPUT
          fi

      - name: SSH deploy
        if: ${{ steps.gate.outputs.deploy == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            cd docker
            echo "Using compose: ${{ steps.choose.outputs.compose }}"
            docker compose -f ${{ steps.choose.outputs.compose }} pull
            docker compose -f ${{ steps.choose.outputs.compose }} up -d

            echo "Containers:"
            docker compose -f ${{ steps.choose.outputs.compose }} ps
