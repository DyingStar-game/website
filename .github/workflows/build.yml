name: Build & Image Next.js

on:
  push:
    branches: [main, develop]
    # Push events for version tags (e.g. v1.2.3) will also trigger
    tags: ["v*", "release-*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: website
  REGISTRY: ghcr.io/dyingstar-game

jobs:
  build:
    name: Build Next.js runtime artifact
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
      options: >-
        --cpus=2
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install gnu tar (fix BusyBox tar for cache)
        run: |
          apk update && apk add --no-cache tar jq
          tar --version || true

      - name: Enable Corepack & activate pinned pnpm
        id: pnpm-version
        run: |
          set -euo pipefail
          corepack enable
          # Extract pnpm version from package.json (packageManager field)
          VERSION=$(jq -r '.packageManager|capture("pnpm@(?<v>.*)$").v' package.json)
          echo "Detected pnpm version: $VERSION"
          corepack prepare pnpm@${VERSION} --activate
          pnpm --version
          echo "pnpm_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup Node (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Restore Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-cache-${{ runner.os }}-${{ hashFiles('next.config.mjs') }}
          restore-keys: |
            next-cache-${{ runner.os }}-

      - name: Install dependencies (pnpm install)
        env:
          PNPM_HOME: ~/.local/share/pnpm
        run: |
          pnpm fetch --silent
          pnpm --reporter=append-only install --frozen-lockfile --prefer-offline

      - name: Allow build scripts (non-interactive)
        run: pnpm config set allow-scripts "@parcel/watcher,@tailwindcss/oxide,esbuild,sharp"

      - name: Recreate .env from secret
        run: |
          echo "Creating .env from secret WEBSITE_ENV_FILE"
          # Secret WEBSITE_ENV_FILE must contain full multi-line contents of .env
          # This env file is needed for the build process
          printf '%s\n' "${{ secrets.WEBSITE_ENV_FILE }}" > .env
          sed -i 's/\r$//' .env

      - name: Recreate .env.production from secret
        run: |
          echo "Creating .env.production from secret WEBSITE_ENV_FILE"
          # Secret WEBSITE_ENV_FILE must contain full multi-line contents of .env.production
          printf "%s" "${{ secrets.WEBSITE_ENV_FILE }}" > .env.production

      - name: Type generation
        run: |
          pnpm --reporter=append-only type:generate

      # - name: Lint
      #   run: |
      #     pnpm --reporter=append-only lint:ci

      - name: Build (Next.js)
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          NEXT_TELEMETRY_DISABLED: 1
        run: pnpm --reporter=append-only build

      - name: Prune dev dependencies from node_modules
        run: pnpm prune --prod

      - name: Pack runtime artifact (preserve pnpm symlinks)
        run: |
          set -euo pipefail
          echo "Creating runtime.tar.gz (symlinks preserved)"
          tar -czf runtime.tar.gz \
            .next/standalone \
            .next/static \
            public \
            package.json \
            pnpm-lock.yaml

      - name: Upload runtime artifact (tarball)
        uses: actions/upload-artifact@v4
        with:
          name: next-runtime
          path: runtime.tar.gz
          retention-days: 1
          if-no-files-found: error
          compression-level: 0

  docker-image:
    name: Build production Docker image (runtime)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    outputs:
      target: ${{ steps.meta.outputs.target }}
      tag_primary: ${{ steps.tags.outputs.tag_primary }}
      tag_secondary: ${{ steps.tags.outputs.tag_secondary }}
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Download runtime artifact
        uses: actions/download-artifact@v4
        with:
          name: next-runtime
          path: artifact

      - name: Extract runtime artifact (restore symlinks)
        run: |
          set -euo pipefail
          tar -xzf artifact/runtime.tar.gz

      - name: Decide target (prod/staging/none)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          TARGET="none"
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            TARGET="prod"
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="staging"
          fi
          if [[ "$TARGET" == "prod" ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> "$GITHUB_OUTPUT"
          else
            echo "platforms=linux/amd64" >> "$GITHUB_OUTPUT"
          fi
          echo "target=$TARGET" >> "$GITHUB_OUTPUT"
          echo "Target decided: $TARGET"
      - name: Compute tags
        id: tags
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          if [[ "${{ steps.meta.outputs.target }}" == "staging" ]]; then
            echo "tag_primary=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging" >> $GITHUB_OUTPUT
            echo "tag_secondary=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${SHORT_SHA}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.meta.outputs.target }}" == "prod" ]]; then
            VER="${GITHUB_REF_NAME}"   # vX.Y.Z
            echo "tag_primary=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VER}" >> $GITHUB_OUTPUT
            echo "tag_secondary=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          else
            echo "tag_primary=" >> $GITHUB_OUTPUT
            echo "tag_secondary=" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        if: ${{ contains(steps.meta.outputs.platforms, 'arm64') }}
        uses: docker/setup-qemu-action@v3

      - name: Decide push/cache policy
        id: policy
        shell: bash
        run: |
          set -euo pipefail
          TARGET="${{ steps.meta.outputs.target }}"
          IS_PR="${{ github.event_name == 'pull_request' }}"
          IS_FORK="false"
          if [[ "$IS_PR" == "true" && "${{ github.event.pull_request.head.repo.fork }}" == "true" ]]; then IS_FORK="true"; fi

          PUSH=false
          if [[ "$TARGET" == "prod" ]]; then
            # prod: uniquement sur tag v*
            if [[ "${GITHUB_REF}" == refs/tags/v* && "$IS_PR" != "true" ]]; then PUSH=true; fi
          elif [[ "$TARGET" == "staging" ]]; then
            # staging: develop ou dispatch, pas en PR
            if [[ "$IS_PR" != "true" ]]; then PUSH=true; fi
          fi

          USE_GHA_CACHE=false
          if [[ "$PUSH" != "true" || "$TARGET" == "none" || "$IS_PR" == "true" ]]; then USE_GHA_CACHE=true; fi

          echo "push=$PUSH"  >> "$GITHUB_OUTPUT"
          echo "use_gha_cache=$USE_GHA_CACHE" >> "$GITHUB_OUTPUT"
          echo "policy -> push=$PUSH ga_cache=$USE_GHA_CACHE target=$TARGET"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ steps.policy.outputs.push == 'true' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build local (pas de push, cache GHA Si possible)
      - name: Build (no push)
        if: ${{ steps.policy.outputs.push != 'true' || steps.meta.outputs.target == 'none' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.prod
          platforms: ${{ steps.meta.outputs.platforms }}
          push: false
          provenance: false
          # on tag quand mÃªme localement pour valider la build
          tags: |
            ${{ steps.tags.outputs.tag_secondary }}
            ${{ steps.tags.outputs.tag_primary }}
          cache-from: ${{ steps.policy.outputs.use_gha_cache == 'true' && 'type=gha' || '' }}
          cache-to: ${{ steps.policy.outputs.use_gha_cache == 'true' && 'type=gha,mode=max' || '' }}

      # Build & Push (avec cache registry)
      - name: Build & Push
        if: ${{ steps.policy.outputs.push == 'true' && steps.meta.outputs.target != 'none' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.prod
          platforms: ${{ steps.meta.outputs.platforms }}
          push: true
          provenance: false
          tags: |
            ${{ steps.tags.outputs.tag_primary }}
            ${{ steps.tags.outputs.tag_secondary }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy (${{ needs.docker-image.outputs.target }})
    needs: [docker-image]
    runs-on: ubuntu-latest
    if: ${{ needs.docker-image.outputs.target == 'staging' || needs.docker-image.outputs.target == 'prod' }}
    environment:
      name: ${{ startsWith(github.ref, 'refs/tags/v') && 'prod' || 'staging' }}

    steps:
      - name: Checkout compose files
        uses: actions/checkout@v4

      - name: Choose compose file
        id: choose
        shell: bash
        run: |
          if [[ "${{ needs.docker-image.outputs.target }}" == "prod" ]]; then
            echo "compose=${{ secrets.COMPOSE_FILE_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "compose=${{ secrets.COMPOSE_FILE_STAGING }}" >> $GITHUB_OUTPUT
          fi

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            # PAT read:packages + username du compte du PAT
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            cd docker
            echo "Using compose: ${{ steps.choose.outputs.compose }}"
            docker compose -f ${{ steps.choose.outputs.compose }} pull --ignore-pull-failures
            docker compose -f ${{ steps.choose.outputs.compose }} up -d --no-deps

            echo "Containers:"
            docker compose -f ${{ steps.choose.outputs.compose }} ps
