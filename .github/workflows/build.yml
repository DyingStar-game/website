name: Build & Image Next.js

on:
  push:
    branches: [main, develop]
    # Push events for version tags (e.g. v1.2.3) will also trigger
    tags: ["v*", "release-*"]
  pull_request:
    branches: [main, develop]
  # Manual trigger: build & push image tagged with branch name
  workflow_dispatch:
    inputs:
      target_tag:
        description: "Tag d'image à déployer, (ex: dev, v*) si vide -> auto (v* pour prod)"
        required: false
        default: "latest"

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Next.js runtime artifact
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
      options: >-
        --cpus=2
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install gnu tar (fix BusyBox tar for cache)
        run: |
          apk update && apk add --no-cache tar
          tar --version || true
      - name: Enable Corepack & activate pinned pnpm
        id: pnpm-version
        run: |
          set -euo pipefail
          corepack enable
          # Extract pnpm version from package.json (packageManager field)
          VERSION=$(grep -E '"packageManager"' package.json | sed -E 's/.*pnpm@([^" ]+).*/\1/')
          echo "Detected pnpm version: $VERSION"
          corepack prepare pnpm@${VERSION} --activate
          pnpm --version
          echo "pnpm_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-

      - name: Install dependencies (pnpm install)
        run: pnpm --reporter=append-only install --frozen-lockfile

      - name: Allow build scripts (non-interactive)
        run: |
          pnpm config set allow-scripts "@parcel/watcher,@tailwindcss/oxide,esbuild,sharp"

      - name: Lint
        run: pnpm --reporter=append-only lint

      - name: Recreate .env.production from secret
        run: |
          echo "Creating .env.production from secret WEBSITE_ENV_PRODUCTION_FILE"
          # Secret WEBSITE_ENV_PRODUCTION_FILE must contain full multi-line contents of .env.production
          printf "%s" "${{ secrets.WEBSITE_ENV_PRODUCTION_FILE }}" > .env.production

      - name: Build (Next.js)
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: pnpm --reporter=append-only build

      - name: Clean up .next/cache to reduce artifact size
        run: rm -rf .next/cache

      - name: Prune dev dependencies from node_modules
        run: pnpm prune --prod

      - name: Pack runtime artifact (preserve pnpm symlinks)
        if: success()
        run: |
          set -euo pipefail
          echo "Creating runtime.tar.gz (symlinks preserved)"
          tar -czf runtime.tar.gz \
            .next/standalone \
            .next/static \
            public \
            package.json \
            pnpm-lock.yaml
          tar -tzf runtime.tar.gz | head -40 || true

      - name: Upload runtime artifact (tarball)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: next-runtime
          path: runtime.tar.gz
          retention-days: 7
          if-no-files-found: error

  docker-image:
    name: Build production Docker image (runtime)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: dyingstar-website
      # REGISTRY will be rebuilt in lowercase inside the script (GitHub Actions does not provide a toLower function)
      REGISTRY: ghcr.io/${{ github.repository_owner }}
      TAG: ${{ github.sha }}
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Download runtime artifact
        uses: actions/download-artifact@v4
        with:
          name: next-runtime
          path: artifact

      - name: Extract runtime artifact (restore symlinks)
        run: |
          set -euo pipefail
          tar -xzf artifact/runtime.tar.gz
          # Quick sanity check: list symlinks inside node_modules (expect pnpm structure)
          find .next/standalone/node_modules -maxdepth 1 -type l -printf '%f -> %l\n' | head -20 || true
          ls -1 .next/standalone/node_modules/.pnpm | head -20 || true

      - name: Build image (docker/Dockerfile.prod)
        run: docker build -f docker/Dockerfile.prod -t $IMAGE_NAME:$TAG .

      - name: Log in to GitHub Container Registry
        # Login if manual run or tag event
        if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag & Push image to GHCR
        # Push image if manual run (branch tag) or tag event (validated on main)
        if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
        env:
          REF_NAME: ${{ github.ref_name }}
          DEFAULT_BRANCH: main
        run: |
          set -euo pipefail
          # Force owner to lowercase for GHCR (Docker image references must be lowercase)
          OWNER_LC=$(printf "%s" "${GITHUB_REPOSITORY_OWNER:-${{ github.repository_owner }}}" | tr '[:upper:]' '[:lower:]')
          IMAGE_FULL="ghcr.io/${OWNER_LC}/${IMAGE_NAME}"
          echo "Event: ${GITHUB_EVENT_NAME} | Ref: ${GITHUB_REF} | Ref name: ${GITHUB_REF_NAME}"

          if [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            # Sanitize branch name for Docker tag
            BRANCH_TAG=$(printf "%s" "${GITHUB_REF_NAME}" | tr '[:upper:]' '[:lower:]' | sed -E 's#[^a-z0-9._-]+#-#g' | sed -E 's#^-+##; s#-+$##')
            # Truncate to 120 chars (Docker tag limit is 128)
            BRANCH_TAG=${BRANCH_TAG:0:120}
            if [ -z "${BRANCH_TAG}" ]; then
              echo "Failed to derive branch tag" >&2
              exit 1
            fi
            echo "Manual run: pushing image tagged '${BRANCH_TAG}'"
            docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:${BRANCH_TAG}
            docker push $IMAGE_FULL:${BRANCH_TAG}
            echo "Pushed image: $IMAGE_FULL:${BRANCH_TAG}"
            docker image ls | grep $IMAGE_NAME | head -5 || true
            exit 0
          fi

          # Tag event path
          echo "Tag run: validating commit is on ${DEFAULT_BRANCH}"
          git fetch origin $DEFAULT_BRANCH --depth=1
          if git merge-base --is-ancestor $GITHUB_SHA origin/$DEFAULT_BRANCH; then
            echo "Commit is on $DEFAULT_BRANCH. Proceeding with push."
          else
            echo "Commit not on $DEFAULT_BRANCH. Skipping registry push." >&2
            exit 0
          fi
          echo "Tagging image with commit SHA: $IMAGE_FULL:$TAG"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:$TAG

          VERSION_TAG="$REF_NAME"
          echo "Tagging image with version tag: $IMAGE_FULL:$VERSION_TAG"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:$VERSION_TAG

          echo "Tagging image with latest: $IMAGE_FULL:latest"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:latest

          echo "Pushing tags..."
          docker push $IMAGE_FULL:$TAG
          docker push $IMAGE_FULL:$VERSION_TAG
          docker push $IMAGE_FULL:latest

          echo "Pushed images:"
          docker image ls | grep $IMAGE_NAME | head -5 || true
  deploy:
    name: Deploy image with ssh
    runs-on: ubuntu-latest
    needs: [docker-image]
    if: >
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v') ||
      github.ref == 'refs/heads/develop'
    environment:
      name: ${{ startsWith(github.ref, 'refs/tags/v') && 'production' || 'staging' }}
      url: ${{ startsWith(github.ref, 'refs/tags/v') && format('https://{0}', secrets.PROD_PUBLIC_URL) || format('https://{0}', secrets.STAGING_PUBLIC_URL) }}
    permissions:
      contents: read
      packages: read
    env:
      IMAGE_NAME: dyingstar-website
    steps:
      - name: Checkout compose files
        uses: actions/checkout@v4

      - name: Compute target (env + tag)
        id: target
        run: |
          set -euo pipefail
          OWNER_LC=$(printf "%s" "${GITHUB_REPOSITORY_OWNER:-${{ github.repository_owner }}}" | tr '[:upper:]' '[:lower:]')
          REGISTRY="ghcr.io/${OWNER_LC}"
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            FINAL_TAG="${GITHUB_REF_NAME}"
            STACK="${{ secrets.STACK_NAME_PROD }}"
            COMPOSE="${{ secrets.COMPOSE_FILE_PROD }}"
          elif [[ "${GITHUB_REF}" == refs/heads/develop ]]; then
            FINAL_TAG="develop"
            STACK="${{ secrets.STACK_NAME_STAGING }}"
            COMPOSE="${{ secrets.COMPOSE_FILE_STAGING }}"
          else
            FINAL_TAG="${{ github.event.inputs.target_tag || 'dev' }}"
            STACK="${{ secrets.STACK_NAME_STAGING }}"
            COMPOSE="${{ secrets.COMPOSE_FILE_STAGING }}"
          fi
          echo "image=${REGISTRY}/${{ env.IMAGE_NAME }}:${FINAL_TAG}" >> "$GITHUB_OUTPUT"
          echo "stack=${STACK}" >> "$GITHUB_OUTPUT"
          echo "compose=${COMPOSE}" >> "$GITHUB_OUTPUT"

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            IMAGE="${{ steps.target.outputs.image }}"
            STACK="${{ steps.target.outputs.stack }}"
            COMPOSE="${{ steps.target.outputs.compose }}"
            echo "Pull ${IMAGE}"
            docker pull "${IMAGE}"
            echo "Deploy using compose file: ${COMPOSE}"
            IMAGE="${IMAGE}" docker compose -f "${COMPOSE}" --env-file "${ENVFILE}" up -d
            echo "Containers:"
            docker compose -f "${COMPOSE}" ps
            echo "Prune old images (dangling)"
            docker image prune -f --filter "dangling=true"
