name: Build & Image Next.js

on:
  push:
    branches: [ main, develop ]
    # Push events for version tags (e.g. v1.2.3) will also trigger
    tags: [ 'v*', 'release-*' ]
  pull_request:
    branches: [ main, develop ]
  # Manual trigger: build & push image tagged with branch name
  workflow_dispatch:
    inputs: {}

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build standalone artifact
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
      options: >-
        --cpus=2
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install gnu tar (fix BusyBox tar for cache)
        run: |
          apk update && apk add --no-cache tar
          tar --version || true
      - name: Enable Corepack & activate pinned pnpm
        id: pnpm-version
        run: |
          set -euo pipefail
          corepack enable
          # Extract pnpm version from package.json (packageManager field)
          VERSION=$(grep -E '"packageManager"' package.json | sed -E 's/.*pnpm@([^" ]+).*/\1/')
          echo "Detected pnpm version: $VERSION"
          corepack prepare pnpm@${VERSION} --activate
          pnpm --version
          echo "pnpm_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-

      - name: Show pnpm store path
        run: pnpm store path

      - name: Install dependencies (pnpm install)
        run: pnpm --reporter=append-only install --frozen-lockfile

      - name: Approve native build scripts
        run: pnpm --reporter=append-only approve-builds

      - name: Lint
        run: pnpm --reporter=append-only lint

      - name: Recreate .env.production from secret
        run: |
          echo "Creating .env.production from secret WEBSITE_ENV_PRODUCTION_FILE"
          # Secret WEBSITE_ENV_PRODUCTION_FILE must contain full multi-line contents of .env.production
          printf "%s" "${{ secrets.WEBSITE_ENV_PRODUCTION_FILE }}" > .env.production

      - name: Build (Next.js standalone)
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: pnpm --reporter=append-only build

      - name: Upload standalone artifact
        if: success()
        continue-on-error: false
        uses: actions/upload-artifact@v4
        with:
          name: next-standalone
          path: |
            .next/standalone
            .next/static
            public
          retention-days: 7
          if-no-files-found: warn

  docker-image:
    name: Build production Docker image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: dyingstar-website
      REGISTRY: ghcr.io/${{ github.repository_owner }}
      TAG: ${{ github.sha }}
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Download standalone artifact
        uses: actions/download-artifact@v4
        with:
          name: next-standalone
          path: artifact
      - name: Prepare build context
        run: |
          mkdir -p .next/standalone .next/static
          cp -a artifact/.next/standalone/* .next/standalone/
          cp -a artifact/.next/static .next/
          cp -a artifact/public ./public
          ls -1 .next | head -20

      - name: Build image (docker/Dockerfile.prod)
        run: docker build -f docker/Dockerfile.prod -t $IMAGE_NAME:$TAG .

      - name: Log in to GitHub Container Registry
        # Login if manual run or tag event
        if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag & Push image to GHCR
        # Push image if manual run (branch tag) or tag event (validated on main)
        if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
        env:
          REF_NAME: ${{ github.ref_name }}
          DEFAULT_BRANCH: main
        run: |
          set -euo pipefail
          IMAGE_FULL="${REGISTRY}/${IMAGE_NAME}"
          echo "Event: ${GITHUB_EVENT_NAME} | Ref: ${GITHUB_REF} | Ref name: ${GITHUB_REF_NAME}"

          if [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            # Sanitize branch name for Docker tag
            BRANCH_TAG=$(printf "%s" "${GITHUB_REF_NAME}" | tr '[:upper:]' '[:lower:]' | sed -E 's#[^a-z0-9._-]+#-#g' | sed -E 's#^-+##; s#-+$##')
            # Truncate to 120 chars (Docker tag limit is 128)
            BRANCH_TAG=${BRANCH_TAG:0:120}
            if [ -z "${BRANCH_TAG}" ]; then
              echo "Failed to derive branch tag" >&2
              exit 1
            fi
            echo "Manual run: pushing image tagged '${BRANCH_TAG}'"
            docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:${BRANCH_TAG}
            docker push $IMAGE_FULL:${BRANCH_TAG}
            echo "Pushed image: $IMAGE_FULL:${BRANCH_TAG}"
            docker image ls | grep $IMAGE_NAME | head -5 || true
            exit 0
          fi

          # Tag event path
          echo "Tag run: validating commit is on ${DEFAULT_BRANCH}"
          git fetch origin $DEFAULT_BRANCH --depth=1
          if git merge-base --is-ancestor $GITHUB_SHA origin/$DEFAULT_BRANCH; then
            echo "Commit is on $DEFAULT_BRANCH. Proceeding with push."
          else
            echo "Commit not on $DEFAULT_BRANCH. Skipping registry push." >&2
            exit 0
          fi
          echo "Tagging image with commit SHA: $IMAGE_FULL:$TAG"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:$TAG

          VERSION_TAG="$REF_NAME"
          echo "Tagging image with version tag: $IMAGE_FULL:$VERSION_TAG"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:$VERSION_TAG

          echo "Tagging image with latest: $IMAGE_FULL:latest"
          docker tag $IMAGE_NAME:$TAG $IMAGE_FULL:latest

          echo "Pushing tags..."
          docker push $IMAGE_FULL:$TAG
          docker push $IMAGE_FULL:$VERSION_TAG
          docker push $IMAGE_FULL:latest

          echo "Pushed images:"
          docker image ls | grep $IMAGE_NAME | head -5 || true